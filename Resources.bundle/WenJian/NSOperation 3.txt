start方法是工作的入口，通常是你用来设置线程或者其他执行工作任务需要的运行环境的，注意不要调用[super start]；isConcurrent是标识这个Operation是否是并发执行的，这里曾经是个坑，如果你没有实现isConcurrent，默认是返回NO，那么你的NSOperation就不是并发执行而是串行执行的，不过在iOS5.0和OS X10.6之后，已经会默认忽略这个返回值，最终和Queue的maxConcurrentOperationCount最大并发操作值相关；isExecuting和isFinished是用来报告当前的工作执行状态情况的，注意必须是线程访问安全的。
注意你的实现要发出合适的KVO通知，因为如果你的NSOperation实现需要用到工作依赖从属特性，而你的实现里没有发出合适的“isFinished”KVO通知，依赖你的NSOperation就无法正常执行。NSOperation支持KVO的属性有：
isCancelled
isConcurrent
isExecuting
isFinished
isReady
dependencies
queuePriority
completionBlock
当然也不是说所有的KVO通知都需要自己去实现，例如通常你用不到addObserver到你工作的“isCancelled”属性，你只需要直接调用cancel方法就可以取消这个工作任务。
实现NSOperation子类后，可以直接调用start或者添加到一个NSOperationQueue里：
1
2
3
NSOperationQueue *queue = [[NSOperationQueue alloc] init];
[queue addOperation:downloader];
NSOperation和NSOperationQueue其他特性
工作是有优先级的，可以通过NSOperation的一下两个接口读取或者设置：
1
2
- (NSOperationQueuePriority)queuePriority;
- (void)setQueuePriority:(NSOperationQueuePriority)p;
工作之间也可有从属依赖关系，只有依赖的工作完成后才会执行：
1
2
- (void)addDependency:(NSOperation *)op;
- (void)removeDependency:(NSOperation *)op;
还可以通过下面接口设置运行NSOpration的子线程优先级：
1
- (void)setQueuePriority:(NSOperationQueuePriority)priority;
如果要设置Queue的并发操作数：
1
- (void)setMaxConcurrentOperationCount:(NSInteger)cnt;
iOS4之后还可以往NSOperation上添加一个结束block，用于在工作执行结束之后的操作：
1
- (void)setCompletionBlock:(void (^)(void))block;
如果需要阻塞等待NSOperation工作结束(别在主线程这么干)，可以使用接口：
1
- (void)waitUntilFinished;
NSOperationQueue除了添加NSOperation外，也支持直接添加一个Block(iOS4之后)：
1
- (void)addOperationWithBlock:(void (^)(void))block
NSOperationQueue可以取消所有添加的工作：
1
- (void)cancelAllOperations;
也可以阻塞式的等待所有工作结束(别在主线程这么干)：
1
- (void)waitUntilAllOperationsAreFinished;
在NSOperation对象中获得被添加的NSOperationQueue队列：
1
+ (id)currentQueue
要获得一个绑定在主线程的NSOperationQueue队列：
1
+ (id)mainQueue
还有些接口参考头文件NSOperation.h和NSOperation Class Reference，Apple的Class Reference文档描述还是很清晰的。
NSInvocationOperation & NSBlockOperation
其实除非必要，简单的工作完全可以使用官方提供的NSOperation两个子类NSInvocationOperation和NSBlockOperation来实现。
NSInvocationOperation：
1
2
3
4
NSInvocationOperation* theOp = [[NSInvocationOperation alloc] 
                       initWithTarget:self                 
                           selector:@selector(myTaskMethod:)                                           
                               object:data];
NSBlockOperation:
1
2
3
4
NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^{
      NSLog(@"Beginning operation.\n");
      // Do some work.
   }];